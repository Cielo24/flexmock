Current Status: ~Beta~

SUPPORTED:
- unittest.TestCase integration
- automatic expectation checking on tearDown
- should_receive()
- with_args() ['with' is reserved in python]
- times() [as well as once, twice and never aliases]
- and_return()
- and_raise()
- new_instances()

TODO:
- pydoc
- at_least, at_most
- ordered
- proxying/spying
- parameter shortcuts for with_args/and_return
- other test runner integration (nose?)
- custom exception checks missing in unittest.TestCase

TESTED WITH:
- python 2.5 on OSX
- python 3.1.2 on OSX

FlexMock provides a mock/stub library for Python.
It is inspired by Ruby's FlexMock, however full feature parity with
the Ruby version is not a goal. I'm leaving out things in the Ruby
version that I think are less useful, like the zero_or_more_times()
expectation for example. I also plan on adding things that Ruby's FlexMock
doesn't support, and implement certain things in a different way.

Sample Usage:

from flexmock import FlexMock

# Make a mock object

mock = FlexMock('temp')
mock.should_receive('method_foo').and_return('value_foo')

# Add some automatically checked expectations

mock.should_receive('method_bar').and_return('bar').once()

# Stub out a method on an existing object

class User: pass
user = User()
FlexMock(user).should_receive('get_name').and_return('name')

# Make a partial stub or mock for all instances of a class

class User: pass
FlexMock(User)
User.should_receive('method_foo').and_return('value_bar')
user = User()
user.method_foo()

# Make a partial mock based on class instance

class Group: pass
group = Group()
FlexMock(group).should_receive('get_name').and_return('group_name')

# Override __new__ method on a class and return fake instances

class Group: pass
FlexMock(Group).new_instances(returns='foo')
