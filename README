Current Status: ~Alpha~

SUPPORTED:
- unittest integration
- should_receive
- with_args ('with' is reserved in python)
- times (as well as once, twice and never aliases)
- and_return
- and_raise
- should_receive

TODO:
- at_least, at_most
- ordered
- proxying?
- module level mocking?
- other test runner integration

FlexMock provides a mock/stub library for Python.
It is inspired by Ruby's FlexMock, however full feature parity with
the Ruby version is not a goal. I'm leaving out things in the Ruby
version that I think are less useful, like the zero_or_more_times()
expectation for example. I may also add things that Ruby's FlexMock
doesn't support, or implement some things in a different way.

Why another mock library for Python? Because the ones out there now
make me cringe after having used Ruby and its nice testing tools.

Sample Usage:

from flexmock import FlexMock

# Make a stub

mock = FlexMock('temp')
mock.should_receive('method_foo').and_return('value_foo')

# Make a mock by adding a required expectation

mock.should_receive('method_bar').and_return('value_bar').once()

# Make a partial stub or mock for all instances of a class

class User: pass
FlexMock(User)
User.should_receive('method_foo').and_return('value_bar')
user = User()
user.method_foo()

# Make a partial mock based on class instance

class Group: pass
group = Group()
FlexMock(group).should_receive('get_name').and_return('group_name')
